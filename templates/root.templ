package templates

import "fmt"
import "time"

templ header() {
	<head>
		<title>Home dashboard</title>
		<script src="/static/js/htmx.1.9.11.min.js" defer="true"></script>
		<script src="/static/js/chart.4.4.2.umd.min.js"></script>
		<link href="/static/css/main.css" rel="stylesheet"/>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="htmx-config" content='{"useTemplateFragments": "true"}'/>
	</head>
}

type SensorData struct {
	Id          string
	Temperature float64
	Humidity    float64
	Date        string
}

type SensorChartData struct {
	Labels            []string  `json:"labels"`
	TemperatureSeries []float64 `json:"temperatureSeries"`
	HumiditySeries    []float64 `json:"humiditySeries"`
}

script SensorChartScript(data SensorChartData) {
    const chart = document.getElementById("chart");
    new Chart(
        chart,
        {
          type: "line",
          data: {
            labels: data.labels,
            datasets: [
              {
                label: "Temperature",
                data: data.temperatureSeries,
                borderWidth: 1,
              },
              {
                label: "Humidity",
                data: data.humiditySeries,
                borderWidth: 1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
              },
            },
          },
        }
    );

}

type SelectOption struct {
	Text  string
	Value time.Duration
}

var (
	INTERVALS = []SelectOption{
		{"10 minutes", 10 * time.Minute},
		{"30 minutes", 30 * time.Minute},
		{"1 hour", time.Hour},
		{"6 hour", 6 * time.Hour},
		{"12 hour", 12 * time.Hour},
		{"1 day", 24 * time.Hour},
	}
	PERIODS = []SelectOption{
		{"last day", 24 * time.Hour},
		{"last week", 7 * 24 * time.Hour},
		{"last month", 30 * 24 * time.Hour},
		{"last 6 months", 180 * 24 * time.Hour},
		{"last year", 365 * 24 * time.Hour},
	}
)

templ SensorChart(data SensorChartData, selectedPeriod time.Duration, selectedInterval time.Duration) {
	<div
		id="chart-container"
		class="relative w-full p-3 lg:w-1/2 lg:p-0"
		hx-target="this"
		hx-swap="outerHTML"
	>
		<canvas id="chart"></canvas>
		<div class="rounded mt-1">
			<label for="select-interval"></label>
			<select
				id="select-interval"
				name="interval"
				class="rounded p-1 bg-gray-900 text-gray-100 border border-gray-800"
				autocomplete="off"
				hx-get={ string(templ.URL("/api/get-sensor-chart")) }
				hx-include="[name='period']"
			>
				for _, interval := range INTERVALS {
					<option
						value={ fmt.Sprintf("%.0fs", interval.Value.Seconds()) }
						if interval.Value == selectedInterval {
							selected="true"
						}
					>{ interval.Text }</option>
				}
			</select>
			<label for="select-period"></label>
			<select
				id="select-period"
				name="period"
				class="rounded p-1 bg-gray-900 text-gray-100 border border-gray-800"
				autocomplete="off"
				hx-get={ string(templ.URL("/api/get-sensor-chart")) }
				hx-include="[name='interval']"
			>
				for _, period := range PERIODS {
					<option
						value={ fmt.Sprintf("%.0fs", period.Value.Seconds()) }
						if period.Value == selectedPeriod {
							selected="true"
						}
					>{ period.Text }</option>
				}
			</select>
		</div>
		@SensorChartScript(data)
	</div>
}

templ LoadMoreDataButton(limit int, offset int) {
	<button
		id="btn-get-more-rows"
		hx-get={ string(templ.URL(fmt.Sprintf("/api/get-more-rows?limit=%d&offset=%d", limit, offset))) }
		hx-swap="outerHTML"
		class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
	>
		Load more
	</button>
}

templ SensorDataRows(data []SensorData, oob bool) {
	<tbody
		id="sensor-data-rows"
		if oob {
			hx-swap-oob="beforeend:#sensor-data-rows"
		}
	>
		for _, d := range data {
			<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-800">
				<td class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">{ d.Date }</td>
				<td class="px-6 py-4">{ fmt.Sprintf("%.01f", d.Temperature) }Â°C</td>
				<td class="px-6 py-4">{ fmt.Sprintf("%.0f", d.Humidity) }%</td>
			</tr>
		}
	</tbody>
}

templ SensorDataTable(data []SensorData) {
	<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
		<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
			<tr>
				<th scope="col" class="px-6 py-3">Date</th>
				<th scope="col" class="px-6 py-3">Temperature</th>
				<th scope="col" class="px-6 py-3">Humidity</th>
			</tr>
		</thead>
		@SensorDataRows(data, false)
	</table>
}

templ RootPage(data []SensorData, chartData SensorChartData, limit int, offset int, period time.Duration, interval time.Duration) {
	<html lang="en" class="dark">
		@header()
		<body class="dark:bg-gray-900 bg-gray-100" hx-boost="true">
			<div class="mt-3 pl-3">
				<a href="/">
					<div class="h-5 w-5 text-gray-400 hover:text-gray-700">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
							<!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
							<path fill="#77767b" d="M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z"></path>
						</svg>
					</div>
				</a>
			</div>
			<div>
				<div class="flex flex-col items-center justify-stretch lg:mb-5">
					@SensorChart(chartData, period, interval)
				</div>
			</div>
			<div class="px-3 lg:px-0 flex flex-col md:justify-center md:items-center">
				if len(data) == 0 {
					<div>
						empty
					</div>
				} else {
					<div class="overflow-auto rounded shadow-lg mb-5 w-full lg:w-1/2">
						@SensorDataTable(data)
					</div>
				}
				@LoadMoreDataButton(limit, offset+limit)
			</div>
		</body>
	</html>
}

templ Composite(components ...templ.Component) {
	for _, c := range components {
		@c
	}
}
